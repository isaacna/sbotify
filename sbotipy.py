import sys, json, datetime
import spotipy
import spotipy.util as util
import praw

if len(sys.argv) > 2:
    username = sys.argv[1]
    number = int(sys.argv[2])
else:
    print "Usage: %s username (number of tracks)" % (sys.argv[0])
    sys.exit()

reddit = praw.Reddit('bot1')
scope = 'playlist-modify-public'

token = util.prompt_for_user_token(username, scope)

#authentication and playlist creation
if token:
    s = spotipy.Spotify(auth=token)
    user_id = s.me().get("id")

    playlist = s.user_playlist_create(user_id, str(datetime.datetime.now().date()) + " - r/ListenToThis"
        ,True, description='Generated by sbotipy')

    playlist_id = playlist.get('id')

#fetch titles from subreddit and return list of spotify track uri's
def get_tracks(number):
    subreddit = reddit.subreddit('listentothis')
    count = 0 
    tracks = [] 

    for post in subreddit.top('day'):
        if count == number:
            return tracks

        query = post.title.split('(')[0].split('[')[0]

        track_uri = search(query)

        try: #try to get track uri from query json, only add count if successful
            track_uri = search(query).get('tracks').get('items')[0].get('uri')
            tracks.append(str(track_uri))
            print("Adding " + str(track_uri))
            count += 1

        except IndexError:
            print("Error retrieving track")
            pass
    
#add tracks to a playlist
def add_tracks(user_id, playlist_id, tracks):
    s.user_playlist_add_tracks(user_id, playlist_id, tracks)
    return

#search for a query and return the track uri
def search(query):
    result = s.search(query,limit=1, type='track')
    return result 

if __name__ == "__main__":
    add_tracks(user_id, playlist_id, get_tracks(number))

