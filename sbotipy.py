import sys, json, datetime
import spotipy
import spotipy.util as util
import praw

if len(sys.argv) > 3:
    username = sys.argv[1]
    subreddit_name = sys.argv[2]
    number = int(sys.argv[3])
    if len(sys.argv) > 4: 
        optional_flair = sys.argv[4] 
    else:
        optional_flair = None

else:
    print("Usage: %s username (number of tracks)" % (sys.argv[0]))
    sys.exit()

reddit = praw.Reddit('bot1')
scope = 'playlist-modify-public'
token = util.prompt_for_user_token(username, scope)
subreddit = reddit.subreddit(subreddit_name)

#authentication and playlist creation
if token:
    s = spotipy.Spotify(auth=token)
    user_id = s.me().get("id")
    
    playlist = s.user_playlist_create(user_id, 
            str(datetime.datetime.now().date()) + " - r/" + str(subreddit.display_name),
            True, 
            description='Generated by sbotipy')

    playlist_id = playlist.get('id')

#fetch titles from subreddit and return list of spotify track uri's
def get_tracks(number):
    count = 0 
    tracks = [] 

    for post in subreddit.top('day'):
        if count == number:
            return tracks

        query = post.title.split('(')[0].split('[')[0]

        try: #try to get track uri from query json, only add count if successful
            if optional_flair != None: 
                if post.link_flair_text.lower()==optional_flair.lower():
                    query_and_add_tracks(query, tracks, post)
                    count += 1
                else: 
                    print("mismatched flair")
            else:
                query_and_add_tracks(query, tracks, post)
                count += 1

        except IndexError:
            print("Error retrieving track")
            pass
    
#create a playlist from list of track strings
def create_playlist_from_tracks(user_id, playlist_id, tracks):
    s.user_playlist_add_tracks(user_id, playlist_id, tracks)
    return

#search for a query and return the track uri
def search(query):
    result = s.search(query,limit=1, type='track')
    return result 

#query and add track strings to list 
def query_and_add_tracks(query, track_list, post): 
    track_uri = search(query).get('tracks').get('items')[0].get('uri')
    track_list.append(str(track_uri))
    print("Adding " + query + " - " + str(track_uri))



if __name__ == "__main__":
    create_playlist_from_tracks(user_id, playlist_id, get_tracks(number))

